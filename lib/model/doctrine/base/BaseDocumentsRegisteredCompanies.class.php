<?php

/**
 * BaseDocumentsRegisteredCompanies
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $icon
 * @property string $url
 * @property integer $registered_companies_id
 * @property integer $information_id
 * @property integer $type_information_id
 * @property integer $calendar_id
 * @property text $descripcion
 * @property RegisteredCompanies $RegisteredCompanies
 * @property Information $Information
 * @property TypeInformation $TypeInformation
 * @property Calendar $Calendar
 * 
 * @method integer                      getId()                      Returns the current record's "id" value
 * @method string                       getName()                    Returns the current record's "name" value
 * @method string                       getIcon()                    Returns the current record's "icon" value
 * @method string                       getUrl()                     Returns the current record's "url" value
 * @method integer                      getRegisteredCompaniesId()   Returns the current record's "registered_companies_id" value
 * @method integer                      getInformationId()           Returns the current record's "information_id" value
 * @method integer                      getTypeInformationId()       Returns the current record's "type_information_id" value
 * @method integer                      getCalendarId()              Returns the current record's "calendar_id" value
 * @method text                         getDescripcion()             Returns the current record's "descripcion" value
 * @method RegisteredCompanies          getRegisteredCompanies()     Returns the current record's "RegisteredCompanies" value
 * @method Information                  getInformation()             Returns the current record's "Information" value
 * @method TypeInformation              getTypeInformation()         Returns the current record's "TypeInformation" value
 * @method Calendar                     getCalendar()                Returns the current record's "Calendar" value
 * @method DocumentsRegisteredCompanies setId()                      Sets the current record's "id" value
 * @method DocumentsRegisteredCompanies setName()                    Sets the current record's "name" value
 * @method DocumentsRegisteredCompanies setIcon()                    Sets the current record's "icon" value
 * @method DocumentsRegisteredCompanies setUrl()                     Sets the current record's "url" value
 * @method DocumentsRegisteredCompanies setRegisteredCompaniesId()   Sets the current record's "registered_companies_id" value
 * @method DocumentsRegisteredCompanies setInformationId()           Sets the current record's "information_id" value
 * @method DocumentsRegisteredCompanies setTypeInformationId()       Sets the current record's "type_information_id" value
 * @method DocumentsRegisteredCompanies setCalendarId()              Sets the current record's "calendar_id" value
 * @method DocumentsRegisteredCompanies setDescripcion()             Sets the current record's "descripcion" value
 * @method DocumentsRegisteredCompanies setRegisteredCompanies()     Sets the current record's "RegisteredCompanies" value
 * @method DocumentsRegisteredCompanies setInformation()             Sets the current record's "Information" value
 * @method DocumentsRegisteredCompanies setTypeInformation()         Sets the current record's "TypeInformation" value
 * @method DocumentsRegisteredCompanies setCalendar()                Sets the current record's "Calendar" value
 * 
 * @package    egauss
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDocumentsRegisteredCompanies extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('documents_registered_companies');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 50,
             ));
        $this->hasColumn('icon', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 200,
             ));
        $this->hasColumn('url', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 200,
             ));
        $this->hasColumn('registered_companies_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('information_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('type_information_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('calendar_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('descripcion', 'text', null, array(
             'type' => 'text',
             ));

        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('RegisteredCompanies', array(
             'local' => 'registered_companies_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Information', array(
             'local' => 'information_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('TypeInformation', array(
             'local' => 'type_information_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Calendar', array(
             'local' => 'calendar_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}